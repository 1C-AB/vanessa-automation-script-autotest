исключение ИсключениеПараметровПочты;
исключение ИсключенияПолученияПеременныхСреды;   

структура РезультатОбновления
    обз пер РезультатОбновления: Строка // имя файла

;

метод Скрипт(НастройкиКонфигурации:Строка, ПараметрОбновления:Строка)
    
    Консоль.Записать("Скрипт начал работу")

    знч Настройки = ВозвращениеПараметров(НастройкиКонфигурации)
    //Настройки для запуска сценариев тестирования
    знч КомандаЗапуска = Настройки.Получить("КомандаЗапуска")
    знч ПользовательБазы = Настройки.Получить("ПользовательБазы")
    знч ПарольБазы = Настройки.Получить("ПарольБазы")
    знч ПутьКРасширению = Настройки.Получить("ПутьКРасширению")
    знч СтрокаПодключенияКБазе = Настройки.Получить("СтрокаПодключенияКБазе")
    знч VAParams = Настройки.Получить("VAParams")
    знч ТестовыеНастройки = Настройки.Получить("ТестовыеНастройки")
    знч НастройкиКаталогаФич = Настройки.Получить("НастройкиКаталогаФич")
    знч Логи = Настройки.Получить("Логи")

    //Настройки для запуска обновления
    знч КомандаЗапускаОбновляемойБазы = Настройки.Получить("КомандаЗапускаОбновляемойБазы")
    знч ПутьКОбновляемойБазе = Настройки.Получить("ПутьКОбновляемойБазе")
    знч ПутьКЛогам = Настройки.Получить("ПутьКЛогам")
    знч ПользовательОбновляемойБазы = Настройки.Получить("ПользовательОбновляемойБазы")
    знч КаталогОбновления = Настройки.Получить("КаталогОбновления")
    знч ФайлОбновления = Настройки.Получить("ФайлОбновления")
    знч ПолныйПутьДляОбновления = КаталогОбновления + ФайлОбновления

    если ПараметрОбновления != "Обновлено"
        ОбновлениеБазы(КомандаЗапускаОбновляемойБазы, ПутьКОбновляемойБазе, ПользовательОбновляемойБазы, ПолныйПутьДляОбновления, ПутьКЛогам)
    ;

    пер Файл = новый Файл(VAParams)
    исп ПотокЧтения = Файл.ОткрытьПотокЧтения()
    пер НовыеНастройки = СериализацияJson.ПрочитатьСоответствие(ПотокЧтения)
    НовыеНастройки["КаталогФич"] = НастройкиКаталогаФич
    НовыеНастройки["GlobalVars"] = новый РезультатОбновления(ПараметрОбновления)
    ПотокЧтения.Закрыть()
    
    пер НастройкиДляТеста = новый Файл(ТестовыеНастройки)
    если НастройкиДляТеста.Существует()
        Файлы.Удалить(ТестовыеНастройки)
    ;
    пер Сериализация = СериализацияJson.ЗаписатьОбъект(НовыеНастройки)
    исп ПотокЗаписи = НастройкиДляТеста.ОткрытьПотокЗаписи(Истина)
    ПотокЗаписи.Записать(Сериализация)
    ПотокЗаписи.Закрыть()

    знч НастройкиЗапускаВанесса = "StartFeaturePlayer;QuietInstallVanessaExt;VAParams=" + НастройкиДляТеста
    
    Консоль.Записать("Запущен метод сценариев")
    ТестированиеСценариев(КомандаЗапуска, ПользовательБазы, ПарольБазы, ПутьКРасширению, СтрокаПодключенияКБазе, НастройкиЗапускаВанесса)

    пер ТемаПисьма = ""
    пер РезультатТеста = "Успешно"
    если НастройкиКаталогаФич.Содержит("UNF")
        ТемаПисьма = "Результат тестирования 1С:УНФ"
    иначе если НастройкиКаталогаФич.Содержит("OTP")
        ТемаПисьма = "Результат тестирования 1АБ:OTP"
    иначе если НастройкиКаталогаФич.Содержит("UT")
        ТемаПисьма = "Результат тестирования 1С:УТ 11"
    иначе если НастройкиКаталогаФич.Содержит("ROZ")
        ТемаПисьма = "Результат тестирования 1С:Розница 3.0"
    иначе   
        ТемаПисьма = "Результат тестирования 1С:ERP"
    ; 

    пер ФайлЛогов = новый Файл(Логи)
    исп ПотокЛогов = ФайлЛогов.ОткрытьПотокЧтения()
    пер ДанныеФайла = ПотокЛогов.ПрочитатьКакСтроку()
    если ДанныеФайла.Содержит("Failed")
        РезультатТеста = "Ошибка"
    ;
    ПотокЛогов.Закрыть()
    Консоль.Записать("Логи отправлены на почту")
    ОтправитьНаПочту("$ТемаПисьма завершился со статусом: $РезультатТеста", Логи)
    
;  

метод ТестированиеСценариев(КомандаЗапуска: Строка, ПользовательБазы:Строка, ПарольБазы:Строка, ПутьКРасширению:Строка, СтрокаПодключенияКБазе:Строка, НастройкиВанесса:Строка)
    попытка
        пер Поднастройка = ["/N$ПользовательБазы", "/P$ПарольБазы", "/TestManager", "/Execute", "$ПутьКРасширению", "/IBConnectionString $СтрокаПодключенияКБазе", 
        "/C$НастройкиВанесса"]
        пер СценарийТестирования = новый ПроцессОс(КомандаЗапуска, Поднастройка, Ложь)
        СценарийТестирования.Запустить()
        СценарийТестирования.ОжидатьЗавершения() 
    поймать ОшибкаОбновления:Исключение
    ;
    
;

метод ОтправитьНаПочту(Тема:Строка, Логи:Строка)

    попытка
        пер ДанныеДляВхода = ПолучитьПеременныеСреды()
        пер Логин = ДанныеДляВхода.Получить("Логин")
        пер Пароль = ДанныеДляВхода.Получить("Пароль")
        пер Отправитель = ДанныеДляВхода.Получить("Отправитель")
        пер Получатель = ВернутьМассивПолучателей(ДанныеДляВхода.Получить("Получатель"))
        пер ПутьДоВложения = Логи
        пер Аутентификация = новый АутентификацияПочтыПоПаролю(Логин, Пароль)
        пер ПараметрыПодключения = новый ПараметрыПодключенияSmtp("smtp.yandex.ru", 465, Аутентификация)
        пер Сообщение = новый Письмо(Отправитель, Получатель, Тема)
        пер Файл = новый Файл(ПутьДоВложения)
        Сообщение.ПриложитьФайл(Файл, "log.txt")
        КлиентSmtp.Отправить(ПараметрыПодключения, Сообщение)
    поймать ИсключениеПочты: Исключение
        выбросить новый ИсключениеПараметровПочты("Ошибка отправки почты", ИсключениеПочты) 
        
    ;
        
;

метод ПолучитьПеременныеСреды():Соответствие<Строка,Строка>

    попытка 
        пер ПеременныеСреды = новый Соответствие<Строка,Строка>()
        пер Среда = СредаИсполнения
        ПеременныеСреды.Вставить("Логин", Среда.ПолучитьПеременную("ScriptLogin")) 
        ПеременныеСреды.Вставить("Пароль", Среда.ПолучитьПеременную("ScriptPass"))
        ПеременныеСреды.Вставить("Отправитель", Среда.ПолучитьПеременную("ScriptSender"))
        ПеременныеСреды.Вставить("Получатель", Среда.ПолучитьПеременную("ScriptRecip"))
        возврат ПеременныеСреды
    поймать ОшибкаСреды: Исключение
        выбросить новый ИсключенияПолученияПеременныхСреды("Ошибка плучения переменных среды", ОшибкаСреды)
        
    ; 
    
;

метод ВернутьМассивПолучателей(СтрокаАдресов: Строка): ЧитаемыйМассив<АдресПочты>
    
    пер Получатели = СтрокаАдресов.Разделить(";")
    пер Адреса:Массив<АдресПочты> = []
    для Элемент из Получатели
        пер Почта = новый АдресПочты(Элемент)
        Адреса.Добавить(Почта)
    ;

    возврат новый ЧитаемыйМассив<АдресПочты>(Адреса)
;

// Читает файл Setting и создает и возвращает соответствие
метод ВозвращениеПараметров(ПутьКфайлу: Строка) :Соответствие<Строка, Строка>
    пер файлЧтения = новый Файл(ПутьКфайлу)
    пер ДляЧтения = файлЧтения.ОткрытьПотокЧтения()
    пер ПараметрыСоответствия = новый Соответствие<Строка, Строка>()
    пер строкавывода = ДляЧтения.ПрочитатьКакСтроку()
    пер массивСтрок = строкавывода.Разделить("\н")

    для стр из массивСтрок
        пер ЧислоСимволовДоРавно = стр.Найти("=")
        пер КлючСоответсвия = стр.Подстрока(0, ЧислоСимволовДоРавно - 1)
        пер ЗначениеСоот = стр.Подстрока(ЧислоСимволовДоРавно + 2)
        пер ЗначениеСоответствия = ЗначениеСоот.Сократить()

        ПараметрыСоответствия.Вставить(КлючСоответсвия, ЗначениеСоответствия)
    ;
    возврат ПараметрыСоответствия
;

метод ОбновлениеБазы(КомандаЗапуска: Строка, Путь:Строка, Пользователь:Строка, ПутьДоОбновления:Строка, ПутьКЛогам:Строка)
    попытка
        пер Обновление = ["DESIGNER", "/F%Путь","/N%Пользователь", "/DisableStartupMessages", "/DisableStartupDialogs",
        "/UpdateCfg %ПутьДоОбновления","/UpdateDBCfg", "/Out %ПутьКЛогам"]
        пер ОбновлениеБазы = новый ПроцессОс(КомандаЗапуска, Обновление, Ложь)
        ОбновлениеБазы.Запустить()
        ОбновлениеБазы.ОжидатьЗавершения() 
    поймать ОшибкаОбновления:Исключение
        ЗаписатьВЛог(ПутьКЛогам, ОшибкаОбновления.Описание)
    ;
;

метод ЗаписатьВЛог(ПолныйПутьКЛогФайлу: Строка, ДанныеЛога: Строка)
    пер Лог = новый Файл(ПолныйПутьКЛогФайлу)
    если не Лог.Существует()
        Файлы.Создать(ПолныйПутьКЛогФайлу)
    ;

    исп Поток = Лог.ОткрытьПотокЗаписи(Истина)
    если не Лог.Размер == 0b 
        Поток.Записать("\н" + ДанныеЛога)
    иначе
        Поток.Записать(ДанныеЛога)
    ;
    Поток.Закрыть()
;

