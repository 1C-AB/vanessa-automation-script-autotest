исключение ИсключениеПараметровПочты;
исключение ИсключенияПолученияПеременныхСреды;   

структура ГлобальныеПеременныеVA
    обз пер НеобходимоОбновить: Строка 
;

метод Скрипт(НастройкиКонфигурации:Строка, ТребуетсяОбновитьКонфигурацию:Строка)

    Консоль.Записать("Скрипт начал работу")

    знч Настройки = ВозвращениеПараметров(НастройкиКонфигурации)
    //Настройки для запуска сценариев тестирования
    знч ПлатформаЗапуска = Настройки.Получить("ПлатформаЗапуска")
    знч ПользовательБазы = Настройки.Получить("ПользовательБазы")
    знч ПарольБазы = Настройки.Получить("ПарольБазы")
    знч ПутьККаталогуVA = Настройки.Получить("ПутьККаталогуVA")
    знч ПутьКОбработке = ПутьККаталогуVA + Настройки.Получить("ПутьКОбработке")
    знч ДанныеПодключенияМенеджераТестирования = Настройки.Получить("ДанныеПодключенияМенеджераТестирования")
    знч VAParams = Настройки.Получить("VAParams")
    знч ТестовыеНастройки = ПутьККаталогуVA + Настройки.Получить("ТестовыеНастройки")
    знч НастройкиКаталогаФич = Настройки.Получить("НастройкиКаталогаФич")
    знч Логи = ПутьККаталогуVA + Настройки.Получить("Логи")

    //Настройки для запуска обновления
    знч ПутьКОбновляемойБазе = Настройки.Получить("ПутьКОбновляемойБазе")
    знч ПутьКЛогам = Настройки.Получить("ПутьКЛогам")
    знч ПользовательОбновляемойБазы = Настройки.Получить("ПользовательОбновляемойБазы")
    знч КаталогСОбновлениями = Настройки.Получить("КаталогСОбновлениями")

    пер ОбновленоУспешно = Истина
    если ТребуетсяОбновитьКонфигурацию == "NeedUpdate"
        Консоль.Записать("Запущен процесс обновления")
        ОбновленоУспешно = ОбновлениеБазы(ПлатформаЗапуска, ПутьКОбновляемойБазе, ПользовательОбновляемойБазы, КаталогСОбновлениями, ПутьКЛогам)
    ; 

    если ОбновленоУспешно
            знч ИзмененныеНастройкиДляТеста = ИзменитьНастройки(VAParams, НастройкиКаталогаФич, ТестовыеНастройки, ТребуетсяОбновитьКонфигурацию)
            знч НастройкиЗапускаВанесса = "StartFeaturePlayer;QuietInstallVanessaExt;VAParams=" + ИзмененныеНастройкиДляТеста
            Консоль.Записать("Запущен процесс тестирования ")
            ТестированиеСценариев(ПлатформаЗапуска, ПользовательБазы, ПарольБазы, ПутьКОбработке, ДанныеПодключенияМенеджераТестирования, НастройкиЗапускаВанесса, Логи)
            пер ДанныеТемы = ПодготовитьТемуПисьма(НастройкиКаталогаФич, Логи)
            пер ТемаПисьма = ДанныеТемы.Получить("Тема")
            пер Результат = ДанныеТемы.Получить("Результат")
            ОтправитьНаПочту("$ТемаПисьма завершился со статусом: $Результат", Логи)
    иначе
            ОтправитьНаПочту("Ошибка обновления", ПутьКЛогам)
        ;
;

метод ИзменитьНастройки(VAParams:Строка, НастройкиКаталогаФич:Строка, ТестовыеНастройки:Строка, ТребуетсяОбновитьКонфигурацию:Строка):Файл
    пер Файл = новый Файл(VAParams)
    пер ПотокЧтения = Файл.ОткрытьПотокЧтения()
    пер НовыеНастройки = СериализацияJson.ПрочитатьСоответствие(ПотокЧтения)
    НовыеНастройки["КаталогФич"] = НастройкиКаталогаФич

    если ТребуетсяОбновитьКонфигурацию == "NeedUpdate"
        НовыеНастройки["GlobalVars"] = новый ГлобальныеПеременныеVA(НеобходимоОбновить = "Да")
    иначе
        НовыеНастройки["GlobalVars"] = новый ГлобальныеПеременныеVA(НеобходимоОбновить = "Нет")
    ;

    ПотокЧтения.Закрыть()
    пер НастройкиДляТеста = новый Файл(ТестовыеНастройки)
    если НастройкиДляТеста.Существует()
        Файлы.Удалить(ТестовыеНастройки)
    ;
    пер Сериализация = СериализацияJson.ЗаписатьОбъект(НовыеНастройки)
    исп ПотокЗаписи = НастройкиДляТеста.ОткрытьПотокЗаписи(Истина)
    ПотокЗаписи.Записать(Сериализация)
    ПотокЗаписи.Закрыть()

    возврат НастройкиДляТеста
;

метод ПодготовитьТемуПисьма(НастройкиКаталогаФич:Строка, ПутьКЛогам:Строка): Соответствие<Строка, Строка>

    пер ТемаПисьма:Соответствие<Строка, Строка>
    если НастройкиКаталогаФич.Содержит("UNF")
        ТемаПисьма["Тема"] = "Результат тестирования 1С:УНФ"
    иначе если НастройкиКаталогаФич.Содержит("OTP")
        ТемаПисьма["Тема"] = "Результат тестирования 1С:OTP"
    иначе если НастройкиКаталогаФич.Содержит("UT")
        ТемаПисьма["Тема"] = "Результат тестирования 1С:УТ"
    иначе если НастройкиКаталогаФич.Содержит("ROZ")
        ТемаПисьма["Тема"] = "Результат тестирования 1С:ROZ"
    иначе
        ТемаПисьма["Тема"] = "Результат тестирования 1С:ERP"   
    ; 

    пер ФайлЛогов = новый Файл(ПутьКЛогам)
    исп ПотокЛогов = ФайлЛогов.ОткрытьПотокЧтения()
    пер ДанныеФайла = ПотокЛогов.ПрочитатьКакСтроку()
    если ДанныеФайла.Содержит("Failed")
        ТемаПисьма["Результат"] = "Ошибка"
    иначе
        ТемаПисьма["Результат"] = "Успех"
    ;
    ПотокЛогов.Закрыть()
    возврат ТемаПисьма
;

метод ТестированиеСценариев(КомандаЗапуска: Строка, ПользовательБазы:Строка, 
                            ПарольБазы:Строка, 
                            ПутьКРасширению:Строка, 
                            СтрокаПодключенияКБазе:Строка, 
                            НастройкиВанесса:Строка,
                            Логи:Строка)
    попытка
        пер Поднастройка = ["/N$ПользовательБазы", "/P$ПарольБазы", "/TestManager", "/Execute", "$ПутьКРасширению", "/IBConnectionString $СтрокаПодключенияКБазе", 
        "/C$НастройкиВанесса"]
        пер СценарийТестирования = новый ПроцессОс(КомандаЗапуска, Поднастройка, Ложь)
        СценарийТестирования.Запустить()
        СценарийТестирования.ОжидатьЗавершения() 
    если СценарийТестирования.ПолучитьКодВозврата() !=0
        ОтправитьНаПочту("Ошибка запуска тестирования", Логи)
    ;
    поймать ОшибкаОбновления:Исключение
    ;
;

метод ОтправитьНаПочту(Тема:Строка, Логи:Строка)

    попытка
        пер ДанныеДляВхода = ПолучитьПеременныеСреды()
        пер Логин = ДанныеДляВхода.Получить("Логин")
        пер Пароль = ДанныеДляВхода.Получить("Пароль")
        пер Отправитель = ДанныеДляВхода.Получить("Отправитель")
        пер Получатель = ВернутьМассивПолучателей(ДанныеДляВхода.Получить("Получатель"))
        пер ПутьДоВложения = Логи
        пер Аутентификация = новый АутентификацияПочтыПоПаролю(Логин, Пароль)
        пер ПараметрыПодключения = новый ПараметрыПодключенияSmtp("smtp.yandex.ru", 465, Аутентификация)
        пер Сообщение = новый Письмо(Отправитель, Получатель, Тема)
        пер Файл = новый Файл(ПутьДоВложения)
        Сообщение.ПриложитьФайл(Файл, "log.txt")
        КлиентSmtp.Отправить(ПараметрыПодключения, Сообщение)
    поймать ИсключениеПочты: Исключение
        выбросить новый ИсключениеПараметровПочты("Ошибка отправки почты", ИсключениеПочты)  
    ;       
;

метод ПолучитьПеременныеСреды():Соответствие<Строка,Строка>

    попытка 
        пер ПеременныеСреды = новый Соответствие<Строка,Строка>()
        пер Среда = СредаИсполнения
        ПеременныеСреды.Вставить("Логин", Среда.ПолучитьПеременную("ScriptLogin")) 
        ПеременныеСреды.Вставить("Пароль", Среда.ПолучитьПеременную("ScriptPass"))
        ПеременныеСреды.Вставить("Отправитель", Среда.ПолучитьПеременную("ScriptSender"))
        ПеременныеСреды.Вставить("Получатель", Среда.ПолучитьПеременную("ScriptRecip"))
        возврат ПеременныеСреды
    поймать ОшибкаСреды: Исключение
        выбросить новый ИсключенияПолученияПеременныхСреды("Ошибка плучения переменных среды", ОшибкаСреды) 
    ; 
;

метод ВернутьМассивПолучателей(СтрокаАдресов: Строка): ЧитаемыйМассив<АдресПочты>
    
    пер Получатели = СтрокаАдресов.Разделить(";")
    пер Адреса:Массив<АдресПочты> = []
    для Элемент из Получатели
        пер Почта = новый АдресПочты(Элемент)
        Адреса.Добавить(Почта)
    ;
    возврат новый ЧитаемыйМассив<АдресПочты>(Адреса)
;

// Читает файл Setting и создает и возвращает соответствие
метод ВозвращениеПараметров(ПутьКфайлу: Строка) :Соответствие<Строка, Строка>
    пер файлЧтения = новый Файл(ПутьКфайлу)
    пер ДляЧтения = файлЧтения.ОткрытьПотокЧтения()
    пер ПараметрыСоответствия = новый Соответствие<Строка, Строка>()
    пер строкавывода = ДляЧтения.ПрочитатьКакСтроку()
    пер массивСтрок = строкавывода.Разделить("\н")

    для стр из массивСтрок
        пер ЧислоСимволовДоРавно = стр.Найти("=")
        пер КлючСоответсвия = стр.Подстрока(0, ЧислоСимволовДоРавно - 1)
        пер ЗначениеСоот = стр.Подстрока(ЧислоСимволовДоРавно + 2)
        пер ЗначениеСоответствия = ЗначениеСоот.Сократить()

        ПараметрыСоответствия.Вставить(КлючСоответсвия, ЗначениеСоответствия)
    ;
    возврат ПараметрыСоответствия
;

метод ОбновлениеБазы(КомандаЗапуска: Строка, Путь:Строка, Пользователь:Строка, ПутьДоОбновления:Строка, ПутьКЛогам:Строка):Булево
    пер КонфигурацияОбновлена = Истина
    попытка
        пер Обновление = ["DESIGNER", "/F%Путь","/N%Пользователь", "/DisableStartupMessages", "/DisableStartupDialogs",
        "/UpdateCfg %ПутьДоОбновления","/UpdateDBCfg", "/Out %ПутьКЛогам"]
        пер ОбновлениеБазы = новый ПроцессОс(КомандаЗапуска, Обновление, Ложь)
        ОбновлениеБазы.Запустить()
        если ОбновлениеБазы.ПолучитьКодВозврата() !=0
            КонфигурацияОбновлена = Ложь
        ;
        ОбновлениеБазы.ОжидатьЗавершения() 
    поймать ОшибкаОбновления:Исключение
        КонфигурацияОбновлена = Ложь
        ЗаписатьВЛог(ПутьКЛогам, ОшибкаОбновления.Описание)
    ;
    возврат КонфигурацияОбновлена
;

метод ЗаписатьВЛог(ПолныйПутьКЛогФайлу: Строка, ДанныеЛога: Строка)
    пер Лог = новый Файл(ПолныйПутьКЛогФайлу)
    если не Лог.Существует()
        Файлы.Создать(ПолныйПутьКЛогФайлу)
    ;

    исп Поток = Лог.ОткрытьПотокЗаписи(Истина)
    если не Лог.Размер == 0b 
        Поток.Записать("\н" + ДанныеЛога)
    иначе
        Поток.Записать(ДанныеЛога)
    ;
    Поток.Закрыть()
;
